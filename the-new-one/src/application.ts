import express from 'express';
import cors from 'cors';
import * as bodyParser from 'body-parser';
import swaggerUi from 'swagger-ui-express';
import { ServerToGameBridge } from './bridge';
import { SwaggerDefinition } from './config';

export class Application {
  private application: express.Application = express();
  private bridge: ServerToGameBridge;

  constructor() {
    this.bridge = new ServerToGameBridge();

    this.application.set('port', 8080);
    this.application.use(bodyParser.json());
    this.application.use(cors());

    this.application.use('/api/documentation', swaggerUi.serve, swaggerUi.setup(SwaggerDefinition.get()));

    /**
     * @swagger
     * /vikings:
     *   get:
     *     tags:
     *       - Vikings
     *     summary: All Vikimgs without IDs
     *     operationId: getAllVikings
     *     responses:
     *       200:
     *         description: Vikings found and returned
     */
    this.application.get('/api/vikings', (req, res) => this.bridge.allVikings(req, res));

    /**
     * @swagger
     * /vikings/{vikingId}:
     *   get:
     *     tags:
     *       - Vikings
     *     summary: Find Viking by a specific ID
     *     description: For a valid response a ID generated by the "New Viking" call is necessary
     *     operationId: getOrderById
     *     produces:
     *       - application/json
     *     parameters:
     *       - name: vikingId
     *         in: path
     *         description: ID of the viking that needs to be fetched
     *         required: true
     *         type: string
     *     responses:
     *       200:
     *         description: "successful operation"
     *       400:
     *         description: "Invalid ID supplied"
     */
    this.application.get('/api/vikings/:id', (req, res) => this.bridge.singleViking(req, res));
    /**
     * @swagger
     * /vikings:
     *   post:
     *     tags:
     *       - Vikings
     *     summary: Todo
     *     description: Todo
     *     operationId: createNewViking
     *     consumes:
     *       - application/json
     *     produces:
     *       - application/json
     *     parameters:
     *       - name: todo
     *         in: body
     *         description: ID of the viking that needs to be fetched
     *         required: true
     *         type: string
     *     responses:
     *       200:
     *         description: "successful operation"
     *       400:
     *         description: "Invalid ID supplied"
     */
    this.application.post('/api/vikings', (req, res) => this.bridge.newViking(req, res));
    /**
     * @swagger
     * /vikings:
     *   put:
     *     tags:
     *       - Vikings
     *     summary: Todo
     *     description: Todo
     *     operationId: createNewViking
     *     consumes:
     *       - application/json
     *     produces:
     *       - application/json
     *     parameters:
     *       - name: todo
     *         in: body
     *         description: ID of the viking that needs to be fetched
     *         required: true
     *         type: string
     *     responses:
     *       200:
     *         description: "successful operation"
     *       400:
     *         description: "Invalid ID supplied"
     */
    this.application.put('/api/vikings', (req, res) => this.bridge.updateAction(req, res));
    /**
     * In case of 404 we will display an error!
     */
    this.application.use((req, res) => res.status(404).send('Page not found! Are you supposed to be here?'));
  }

  public run() {
    this.application.listen(this.application.get('port'), () => {
      console.log(this.startupText());
      this.bridge.startGame();
    });
  }

  private startupText(): string {
    return `--- VALHALLA ---
>> App is running at http://localhost:${this.application.get('port')} in ${this.application.get('env')} mode
>> Press CTRL-C to stop
----------------\n`;
  }
}